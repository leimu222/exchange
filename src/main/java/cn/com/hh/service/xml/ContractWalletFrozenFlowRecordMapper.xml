<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.common.api.mapper.ContractWalletFrozenFlowRecordMapper">

    <resultMap id="ContractWalletFrozenFlowRecordResult" type="ContractWalletFrozenFlowRecord" >
            <result property="id" column="id" />
            <result property="memberId" column="member_id" />
            <result property="coinId" column="coin_id" />
            <result property="amount" column="amount" />
            <result property="afterFrozenBalance" column="after_frozen_balance" />
            <result property="operationType" column="operation_type" />
            <result property="createTime" column="create_time" />
            <result property="sequence" column="sequence" />
            <result property="remark" column="remark" />
    </resultMap>

    <sql id="selectContractWalletFrozenFlowRecordVo">
        select   id,  member_id,  coin_id,  amount,  after_frozen_balance,  operation_type,  create_time,  sequence,  remark 
        from contract_wallet_frozen_flow_record
    </sql>
    <!-- 查询列表 -->
    <select id="selectContractWalletFrozenFlowRecordList" parameterType="ContractWalletFrozenFlowRecord" resultMap="ContractWalletFrozenFlowRecordResult">
        <include refid="selectContractWalletFrozenFlowRecordVo"/>
        <where>
                    <if test = "id != null">
                        and id  = #{id}
                    </if>
                    <if test = "memberId != null">
                        and member_id  = #{memberId}
                    </if>
                    <if test = "coinId != null and coinId != ''">
                        and coin_id  = #{coinId}
                    </if>
                    <if test = "amount != null">
                        and amount  = #{amount}
                    </if>
                    <if test = "afterFrozenBalance != null">
                        and after_frozen_balance  = #{afterFrozenBalance}
                    </if>
                    <if test = "operationType != null">
                        and operation_type  = #{operationType}
                    </if>
                    <if test = "createTime != null">
                        and create_time  = #{createTime}
                    </if>
                    <if test = "sequence != null">
                        and sequence  = #{sequence}
                    </if>
                    <if test = "remark != null and remark != ''">
                        and remark  = #{remark}
                    </if>
        </where>
    </select>
    <!-- 根据ID查询实体类 -->
    <select id="selectContractWalletFrozenFlowRecordById" parameterType="Long" resultMap="ContractWalletFrozenFlowRecordResult">
        <include refid="selectContractWalletFrozenFlowRecordVo"/>
        where  id  = #{id} 
    </select>
    <!-- 插入实体类 -->
    <insert id="insertContractWalletFrozenFlowRecord" parameterType="ContractWalletFrozenFlowRecord" useGeneratedKeys="true" >
        insert into contract_wallet_frozen_flow_record
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test = "id != null">
                id,
            </if>
            <if test = "memberId != null">
                member_id,
            </if>
            <if test = "coinId != null">
                coin_id,
            </if>
            <if test = "amount != null">
                amount,
            </if>
            <if test = "afterFrozenBalance != null">
                after_frozen_balance,
            </if>
            <if test = "operationType != null">
                operation_type,
            </if>
            <if test = "createTime != null">
                create_time,
            </if>
            <if test = "sequence != null">
                sequence,
            </if>
            <if test = "remark != null">
                remark,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test = "id != null">
                #{id},
            </if>
            <if test = "memberId != null">
                #{memberId},
            </if>
            <if test = "coinId != null">
                #{coinId},
            </if>
            <if test = "amount != null">
                #{amount},
            </if>
            <if test = "afterFrozenBalance != null">
                #{afterFrozenBalance},
            </if>
            <if test = "operationType != null">
                #{operationType},
            </if>
            <if test = "createTime != null">
                #{createTime},
            </if>
            <if test = "sequence != null">
                #{sequence},
            </if>
            <if test = "remark != null">
                #{remark},
            </if>
        </trim>
    </insert>
    <!-- 更新实体类 -->
    <update id="updateContractWalletFrozenFlowRecord" parameterType="ContractWalletFrozenFlowRecord">
        update contract_wallet_frozen_flow_record
        <trim prefix="SET" suffixOverrides=",">
            <if test = "memberId != null">
            member_id  = #{memberId},
            </if>
            <if test = "coinId != null">
            coin_id  = #{coinId},
            </if>
            <if test = "amount != null">
            amount  = #{amount},
            </if>
            <if test = "afterFrozenBalance != null">
            after_frozen_balance  = #{afterFrozenBalance},
            </if>
            <if test = "operationType != null">
            operation_type  = #{operationType},
            </if>
            <if test = "createTime != null">
            create_time  = #{createTime},
            </if>
            <if test = "sequence != null">
            sequence  = #{sequence},
            </if>
            <if test = "remark != null">
            remark  = #{remark},
            </if>
        </trim>
        where  id  = #{id} 
    </update>
    <delete id="deleteContractWalletFrozenFlowRecordById" parameterType="Long">
        delete from contract_wallet_frozen_flow_record where  id  = #{id} 
    </delete>

    <delete id="deleteContractWalletFrozenFlowRecordByIds" parameterType="Long">
        delete from contract_wallet_frozen_flow_record where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>